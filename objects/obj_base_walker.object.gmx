<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_wall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//variables
movement_speed = 4;
alarm_set(0, 1);
/*
    0 - Stopped
    1 - Moving
    2 - Depends of mother or kid
*/
status = 0; //irandom(2);
direction_to_move = 0;
movementX = 0;
movementY = 0;
speed_multiplier = 1;
//Change this in each mother/kid
//Sprites for the character
sprite_to_useUp     = spr_sexyGirl1_up;
sprite_to_useDown   = spr_sexyGirl1_down;
sprite_to_useLeft   = spr_sexyGirl1_left;
sprite_to_useRight  = spr_sexyGirl1_right;
//Set one
sprite_to_use = sprite_to_useDown;
//Unstuck if created isnide a wall
if(place_meeting(x,y, obj_wall)){
    direction = point_direction(x, y, room_width/2, room_height/2);
    move_outside_solid(direction, 0);
}
//Relocate it if too near to the player
while(distance_to_object(obj_bocata_player) &lt; 50){
    x = random_range(room_width/2, room_width);
    y = random_range(0, room_height/2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Choose an direction and move
if(status == 1){
    //Decide a direction and move
    movementX = 0;
    movementY = 0;
    direction_to_move = irandom(3);
    direction = direction_to_move * 90;
    //And change status
    status = 0;
    speed_multiplier = 1;
}// Stay static
else if(status == 0){
    status = 1;
    speed_multiplier = 0;
}
//Set a new alarm
alarm_set(0, random_range(10, 50));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Control to not go out of the place (revise)
if(status == 1){
    if(x &lt; sprite_width || x &gt; room_width - sprite_width
            || y &lt; sprite_height || y &gt; room_height - sprite_height){
        speed_multiplier = 0;
        //alarm_set(0, 1);
    }
}
//Go according direction selected
switch(direction){
    case 0: //Right
        sprite_to_use = sprite_to_useRight;
        break;
    case 90: //Up
        sprite_to_use = sprite_to_useUp;
        break;
    case 180: //Left
        sprite_to_use = sprite_to_useLeft;
        break;
    case 270: //Down
        sprite_to_use = sprite_to_useDown;
        break;
}
sprite_index = sprite_to_use;
//Set speeds
//hspeed = movementX * movement_speed * speed_multiplier;
//vspeed = movementY * movement_speed * speed_multiplier;
//Alternate option
speed = movement_speed * speed_multiplier;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
if(status == 1){
    //Unstuck
    move_outside_solid(direction + 180, 100);
    //And stop
    speed_multiplier = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Unstuck
while(place_meeting(x, y, obj_bocata_player)){
    switch(direction){
        case 0:
            x--;
        break;
        case 90:
            y++;
        break;
        case 180:
            x++;
        break;
        case 270:
            y--;
        break;
        }
    }
if(status == 1){
    //
    speed_multiplier = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the player stationary
if(speed == 0)
    draw_sprite(sprite_to_use, 2, x, y);
//Or in movement
else
    draw_self();
    
//Check their status
//draw_text(x, y+30, status);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
