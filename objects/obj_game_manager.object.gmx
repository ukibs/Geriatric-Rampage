<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
status_paused = false;
player = instance_find(obj_player, 0);
inventory_open = false;
//Check if the player is returning to the place
if(global.last_place == room){
    player.x = global.last_xPos;
    player.y = global.last_yPos;
}
//
selected_paper = 0;
missing_paper = spr_no_letter;
paper_picture[0] = spr_letter1;
paper_picture[1] = spr_letter2;
paper_picture[2] = spr_letter3;

//Play ambient sound if in the park
if(room == room_park)
    audio_play_sound(snd_park_ambient, 1, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the keys
key_pause = keyboard_check_pressed(vk_escape) || gamepad_button_check_pressed(0,gp_start);
key_confirm = keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0,gp_face1);
key_map = keyboard_check_pressed(ord("M")) || gamepad_button_check_pressed(0,gp_face3);
key_inventory = keyboard_check_pressed(ord("I")) || gamepad_button_check_pressed(0,gp_face2);
//Inventory keys
key_left = keyboard_check_pressed(vk_left) || gamepad_button_check_pressed(0,gp_padl);
key_right = keyboard_check_pressed(vk_right) || gamepad_button_check_pressed(0,gp_padr);
//(Un)Pause the game
if(key_pause == true &amp;&amp; inventory_open == false){
    if(status_paused == false){
        status_paused = true;
        instance_deactivate_all(true);
    }
    else{
        status_paused = false;
        instance_activate_all();
    }
}
//
if(key_confirm == true &amp;&amp; status_paused == true){
    //Save the last place
    global.last_place = room;
    global.last_xPos = player.x;
    global.last_yPos = player.y;
    //Save all the data
    script_execute(scr_save_game());
    //And go out
    room_goto(room_menu);
}
//To go to the map
//Hay que revisarlo
if(key_map == true &amp;&amp; status_paused == false &amp;&amp; player.status_still == false &amp;&amp; global.global_stage &gt; 0){
    room_goto(room_map);
    //global.last_place = room_get_name(room);
}

//Controls for the inventory
if(key_inventory == true &amp;&amp; status_paused == false){
    if(inventory_open == true){
        player.status_still = false;
        inventory_open = false;
        //"Release" the key
        key_inventory = false;
    }
    else{
        player.status_still = true;
        inventory_open = true;
        //"Release" the key
        key_inventory = false;
    }
}
if(inventory_open == true){
    selected_paper += -key_left + key_right;
    selected_paper = clamp(selected_paper, 0, 2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Save the last place
global.last_place = room;
//global.last_room = room_get_name(room);
//global.last_room = asset_get_index(global.last_room);
global.last_xPos = player.x;
global.last_yPos = player.y;

//Stop playing park sound
if(room == room_park)
    audio_stop_sound(snd_park_ambient);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw pause options
if(status_paused == true){
    draw_sprite(spr_pause_window,0,0,0);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_colour(c_black);
    draw_set_font(font_demolition);
    draw_text(300, 100, "PAUSED");
    draw_set_font(font_SpeakAndText);
    draw_set_colour(c_white);
    draw_text(300, 200, "ESC to return");
    draw_text(300, 280, "ENTER to quit");
}
//Check stuff
//draw_text(50,50,room);

//
if(inventory_open == true){
    //Draw the paper or the question mark
    if(global.paper[selected_paper] == 1)
        draw_sprite(paper_picture[selected_paper], 0, 0, 0);
    else
        draw_sprite(missing_paper, 0, 0, 0);
    //Draw the icons
    draw_sprite(spr_inventory_char, 0, 500, 0);
    if(selected_paper &gt; 0)
        draw_sprite(spr_left_arrow, 0, 500, 200);
    if(selected_paper &lt; array_length_1d(paper_picture)-1)
    draw_sprite(spr_right_arrow, 0, 500, 300);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
