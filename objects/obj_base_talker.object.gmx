<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_wall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set initial parameters
text_counter = 0;
status_acting = false;
usable = true;
show_option = false;
selected_option = 0;
//Get the player
player = instance_find(obj_player, 0);
interactor = instance_find(obj_interactor, 0);

//These must be applied on each character
text[0] = "1This is the base talkable person";
text_length = array_length_1d(text);
speaker_name = "Base talker";

//Only if it activates a minigame (set true)
minigame_activator = false; 
assigned_room = "None";

//Only if it walks (set true)
walk = false;
if(walk == true){
    randomize();
    alarm_set(1, random_range(10, 30));
}
sprite_to_useDown   = sprite_index;
sprite_to_useUp     = spr_sexyGirl1_up;
sprite_to_useLeft   = spr_sexyGirl1_left;
sprite_to_useRight  = spr_sexyGirl1_right;

//Movement stuff (if true)
/* Walking status 
    0 - Stopped
    1 - Walking
*/
status = 0;
movementX = 0;
movementY = 0;
direction_to_move = 0;
speed_multiplier = 0;
movement_speed = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If it walks
//Choose an direction and move
if(status == 1){
    //Decide a direction and move
    movementX = 0;
    movementY = 0;
    direction_to_move = irandom(4);
    //And change status
    status = 0;
    speed_multiplier = 1;
}// Stay static
else if(status == 0){
    status = 1;
    speed_multiplier = 0;
}
//Set a new alarm
alarm_set(1, random_range(10, 50));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>usable = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the interaction key
interaction_key = keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0,gp_face1);
key_left = keyboard_check_pressed(vk_left) || gamepad_button_check_pressed(0,gp_padl);
key_right = keyboard_check_pressed(vk_right) || gamepad_button_check_pressed(0,gp_padr);
//Advance the text (or close)
if(interaction_key == true &amp;&amp; status_acting = true){
    if(text_counter &lt; text_length-1)
        text_counter += 1;
    //Selecting the option (if is active)
    else if(text_counter == text_length-1 &amp;&amp; 
            minigame_activator = true &amp;&amp;
            selected_option == 0){
        room_goto(assigned_room);
    }
    else{
        show_option = false;
        text_counter = 0;
        status_acting = false;
        if(walk == true) alarm_set(1, random_range(10, 30));
        player.status_still = false;
        //Alarm to not overlap conversations
        usable = false;
        alarm[0] = 10;
    }
}
//
if(text_counter == text_length-1 &amp;&amp; minigame_activator == true){
    show_option = true;
    selected_option += -key_left + key_right;
    selected_option = abs(selected_option%2);
}
//To walk
if(walk == true){
    //Control to not collide, and change direction
    if(place_meeting(x+hspeed, y+vspeed, obj_wall)){
        speed_multiplier = 0;
        //alarm_set(1, 1);
    }
    //Control to not go out of the place
    if(x+hspeed &lt; 50 || x+hspeed &gt; room_width - 50
        || y+vspeed &lt; 50 || y+vspeed &gt; room_height - 50){
        speed_multiplier = 0;
        //alarm_set(1, 1);
    }
    //Go according direction selected
    switch(direction_to_move){
        case 0: //Left
            movementX = -1;
            sprite_to_use = sprite_to_useLeft;
            direction = 180;
            break;
        case 1: //Right
            movementX = 1;
            sprite_to_use = sprite_to_useRight;
            direction = 0;
            break;
        case 2: //Up
            movementY = -1;
            sprite_to_use = sprite_to_useUp;
            direction = 90;
            break;
        case 3: //Down
            movementY = 1;
            sprite_to_use = sprite_to_useDown;
            direction = 270;
            break;
    }
    sprite_index = sprite_to_use;
    //Set speeds
    hspeed = movementX * movement_speed * speed_multiplier;
    vspeed = movementY * movement_speed * speed_multiplier;
}

//Stop the walker for talk
if(walk == true &amp;&amp; status_acting == true){
    alarm_set(1, 0);
    hspeed = 0;
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_interactor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Interaction
interaction_key = keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0,gp_face1);
if(interaction_key == true &amp;&amp; 
    usable == true){
    player.status_still = true;
    status_acting = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
x -= hspeed;
y -= vspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//To talk
if(status_acting == true){
    draw_sprite(spr_text_background, 0, view_xview[0]+300, view_yview[0]+480);
    //draw_sprite(spr_text_background, 0, room_width/2, room_height);
    draw_set_halign(fa_left);
    draw_set_colour(c_white);
    draw_set_font(font_SpeakAndText);
    //These instructions for showing whoÂ´s speaking
    speaker = string_char_at(text[text_counter], 0);
    if(speaker == "0")  //Read it as char
        draw_text(150, 360, "Eustaquio");
    else
        draw_text(300, 360, speaker_name);
    //Show the text
    string_to_show = string_delete(text[text_counter], 1, 1);
    string_to_show1 = string_copy(string_to_show, 1, 40);
    draw_text(100, 380, string(string_to_show1));
    if(string_length(string_to_show) &gt; 40){
        string_to_show2 = string_copy(string_to_show, 41, 40);
        draw_text(100, 420, string(string_to_show2));
    }
    //Show the option
    if(show_option == true){
        draw_text(150, 400, "Yes");
        draw_text(250, 400, "No");
        draw_sprite(spr_baston_pq, 0, 120 + selected_option * 100, 400);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the quiet person if not walking
if(hspeed == 0 &amp;&amp; vspeed == 0)
    draw_sprite(sprite_index, 1, x, y);
else
    draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
