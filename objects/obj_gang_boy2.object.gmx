<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_generic_man_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_generic_man_down</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player
player = instance_find(obj_kotb_player, 0);
//Variables
movement_speed = 2;
proyectile_speed = 6;
life = 100;
distance_to_player = 0;
first_check = false;

/* Status (and speed multiplier)
    0 - Stopping for throwing stones
    1 - Moving towards the player
    2 - Running out of the park
    3 - Being slapped
*/
status = 1;

//Skins
sprite_to_use_up = spr_generic_man_up;
sprite_to_use_left = spr_generic_man_Left;
sprite_to_use_down = spr_generic_man_down;
sprite_to_use_rigth = spr_generic_man_Right;
//
sprite_to_use = sprite_to_use_down;
//For positioning
direction = point_direction(x, y, player.x, player.y);
//Relocate it if too near to the player
while(distance_to_object(player) &lt; 50){
    x = random_range(room_width/2, room_width);
    y = random_range(0, room_height/2);
}
//Unstuck them if created inside a wall
if(place_meeting(x, y, obj_wall)){
    move_outside_solid(direction, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Point to the nearest exit
centralX = room_width/2;
centralY = room_height/2;
distanceX = centralX - x;
distanceY = centralY - y;
if(abs(distanceX) &gt; abs(distanceY)){
    direction = 90 * sign(distanceX) + 90;
}
else{
    direction = 90 * -sign(distanceY) + 180;
}
//Reset the alarm
alarm_set(2, 15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Return to the normal status
if(life &gt; 0){
    status = 1;
}
else{
    status = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Trow the stuff and start to walk again
if(life &gt; 0){ //Control it is still not crying
    instance_create(x, y, obj_throwing_stuff);
    status = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
if(life &lt;= 0){
    //status = 2;
}
//Get the player's position
playerX = player.x;
playerY = player.y;
//Get the distance
distanceX = playerX - x;
distanceY = playerY - y;
distance_to_player = distance_to_object(player);
//Check the direction you want it to go
//If seeking the player
if(status &lt;= 1){    
    if(abs(distanceX) &gt; abs(distanceY)){
        direction = 90 * -sign(distanceX) + 90;
    }
    else{
        direction = 90 * sign(distanceY) + 180;
    }
}
//If going out
if(status == 2){
    //Destroy it if quits the room
    if(x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height){
        instance_destroy();
    }
    //Firstly run away from the player
    if(first_check == false){
        if(abs(distanceX) &gt; abs(distanceY)){
            direction = 90 * sign(distanceX) + 90;
        }
        else{
            direction = 90 * -sign(distanceY) + 180;
        }
    }
    //Before that check it in alarm 2 and collisions
}
//Check direction for the sprite
switch(direction){
    case 0:
        sprite_to_use = sprite_to_use_rigth;
        break;
    case 90:
        sprite_to_use = sprite_to_use_up;
        break;
    case 180:
        sprite_to_use = sprite_to_use_left;
        break;
    case 270:
        sprite_to_use = sprite_to_use_down;
        break;
}
//Apply speed
speed = movement_speed * status;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_gang_boy2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if the mate is nearer to the player
if(other.distance_to_player &lt; distance_to_player &amp;&amp; status == 1){
    //Stop for throwing the stone
    status = 0;
    alarm_set(0, distance_to_object(player) / proyectile_speed * 2);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Unblock it
switch(direction){
    case 0:
        x -= movement_speed * status;
        break;
    case 90:
        y -= movement_speed * status;
        break;
    case 180:
        x += movement_speed * status;
        break;
    case 270:
        y += movement_speed * status;
        break;
}
//Stop for throwing the stone
if(status == 1){
    status = 0;
    //alarm_set(0, distance_to_object(player) / proyectile_speed * 2);
    alarm_set(0, 45);
}
//If running away, change the direction
if(status == 2){
    first_check = true;
    direction += sign(random_range(-10, 10)) * 90;
    alarm_set(0, 15);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//De momento nada

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the player stationary
if(speed == 0)
    draw_sprite(sprite_to_use, 2, x, y);
//Draw it spinning (hay que revisarlo)
else if (status == 3)
    draw_sprite(spr_generic_man_spinning, delta_time%12, x, y);
//Or in movement
else
    draw_self();

//Draw crying icon
if(status == 2){
    draw_sprite(spr_crying_icon, 0, x, y - 40);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
