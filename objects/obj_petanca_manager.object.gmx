<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Decide a place for the boliche
boliche_xPosition = random_range(room_width/2-200, room_width/2+200);
boliche_yPosition = random_range(room_height/2, room_height/2+200);
//Place the boliche
boliche = instance_create(boliche_xPosition, boliche_yPosition, obj_boliche);
//Set the launching place
launching_placeX = room_width/2;
launching_placeY = 450;
/*Phases of the match
    0 - 
    1 - Player´s turn
    2 - Oponent´s turn
*/
phase = 0;
//Match turns (3 in total)
turn = 0;
//Put the pointer
pointer = instance_create(room_width/2, 450, obj_pointer);
//Initalize the power of the throw
throwing_power = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the keys
key_left = keyboard_check(vk_left);
key_right = keyboard_check(vk_right);
key_space_pressed = keyboard_check_pressed(vk_space);
key_space_released = keyboard_check_released(vk_space);
//Check turns played
if(turn &lt; 3){
    //Players turn
    if(phase = 0){
        pointer.direction -= -key_left + key_right;
        pointer.direction = clamp(pointer.direction, 10, 170);
        pointer.image_angle = pointer.direction;
        if(key_space_pressed == true){
            phase = 1;
            power_meter = instance_create(550, 240, obj_power_meter);
        }
    }
    //Charguing the shoot
    if(phase == 1){
        if(throwing_power + 2 &lt;= 100)
            throwing_power += 2;
        power_meter.image_yscale = throwing_power / 100;
        if(key_space_released == true){
            phase = 2;
            //Throwing the ball
            ball = instance_create(pointer.x, pointer.y, obj_player_ball);
            ball.direction = pointer.direction;
            ball.speed = throwing_power;
        }
    }
    //Waiting for the balls to stop
    if(phase == 2){
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
