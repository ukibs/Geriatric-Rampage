<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Decide a place for the boliche
randomize();
boliche_xPosition = random_range(room_width/2-150, room_width/2+150);
boliche_yPosition = random_range(room_height/2-200, room_height/2);
//Place the boliche
boliche = instance_create(boliche_xPosition, boliche_yPosition, obj_boliche);
//Set the launching place
launching_placeX = room_width/2;
launching_placeY = 450;
/*Phases of the match
    0 - 
    1 - 
    2 - 
    3 - 
*/
phase = 0;
//Match turns (3 in total)
turn = 0;
//Put the pointer
pointer = instance_create(room_width/2, 450, obj_pointer);
x = pointer.x;
y = pointer.y;
//Put the power meter
power_meter_frame = instance_find(obj_power_meter_frame, 0);
power_meter = instance_create(power_meter_frame.x, power_meter_frame.y, obj_power_meter);
//Initalize the power of the throw and set a max
throwing_power = 0;
max_power = 30;
//
winner = 0;
checked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the keys
key_left = keyboard_check(vk_left);
key_right = keyboard_check(vk_right);
key_space_pressed = keyboard_check_pressed(vk_space);
key_space_released = keyboard_check_released(vk_space);
//Check turns played
if(turn &lt; 3){
    switch(phase){
        case 0: //Oponent´s turn
            boliche_direction = point_direction(pointer.x, pointer.y, boliche.x, boliche.y);
            if(boliche_direction &gt; pointer.direction+5)
                pointer.direction += 1;
            else if(boliche_direction &lt; pointer.direction-5)
                pointer.direction -= 1;
            else
                phase ++;
            pointer.image_angle = pointer.direction;
            break;
        case 1: //Charguing the shoot
            if(throwing_power &lt; distance_to_object(boliche)/15){
                throwing_power += 1;
                power_meter.image_yscale = throwing_power / max_power;
            }
            else{
                //Throwing the ball
                oponent_ball[turn] = instance_create(pointer.x, pointer.y, obj_oponent_ball);
                oponent_ball[turn].direction = pointer.direction;
                oponent_ball[turn].speed = throwing_power;
                throwing_power = 0;
                phase ++;
            }
            break;
        case 2: //Waiting for the launched ball to stop
            if(oponent_ball[turn].speed == 0){
                pointer.direction = 90;
                pointer.image_angle = pointer.direction;
                power_meter.image_yscale = 0;
                phase ++;
            }
            break;
        case 3: //Players turn
            pointer.direction -= -key_left + key_right;
            pointer.direction = clamp(pointer.direction, 10, 170);
            pointer.image_angle = pointer.direction;
            if(key_space_pressed == true){
                phase ++;
                power_meter.image_yscale = 0;
            }
            break;
        case 4: //Charguing the shoot
            if(throwing_power + 1 &lt;= max_power)
            throwing_power += 1;
            power_meter.image_yscale = throwing_power / max_power;
            if(key_space_released == true){
                //Throwing the ball
                player_ball[turn] = instance_create(pointer.x, pointer.y, obj_player_ball);
                player_ball[turn].direction = pointer.direction;
                player_ball[turn].speed = throwing_power;
                throwing_power = 0;
                phase ++;
            }
            break;
        case 5: //Waiting for the launched ball to stop
            if(player_ball[turn].speed == 0){
                pointer.direction = 90;
                pointer.image_angle = pointer.direction;
                power_meter.image_yscale = 0;
                //Next turn
                phase = 0;
                turn += 1;
            }            
            break;
    }
}//When finished
else if(checked == false){
    min_player_ball_distance = 200;
    for(i=0; i&lt;array_length_1d(player_ball); i++){
        x = player_ball[i].x;
        y = player_ball[i].y;
        if(distance_to_object(boliche) &lt; min_player_ball_distance)
            min_player_ball_distance = distance_to_object(boliche);
    }
    min_oponent_ball_distance = 200;
    for(i=0; i&lt;array_length_1d(oponent_ball); i++){
        x = oponent_ball[i].x;
        y = oponent_ball[i].y;
        if(distance_to_object(boliche) &lt; min_oponent_ball_distance)
            min_oponent_ball_distance = distance_to_object(boliche);
    }
    if(min_player_ball_distance &lt; min_oponent_ball_distance)
        winner = 1;
    else
        winner = 2;
    checked = true;
}//Then you can exit the game
else{
    if(key_space_pressed == true){
        room_goto(global.last_place);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Text parameters
draw_set_halign(fa_center);
draw_set_valign(fa_center);
//If finished, show the winner
if(checked == true){
    if(winner = 1)
    {
        draw_text(room_width/2, room_height/2, "¡¡YOU WIN!!");
        draw_set_font(font_sacha);
        draw_set_color(c_blue);
    }
    else
    {
        draw_text(room_width/2, room_height/2, "¡¡YOU LOSE!!");
        draw_set_font(font_sacha);
        draw_set_colour(c_red);
    }
}//If not, show the current player
else{
    if(phase &gt; 2)
    {
        draw_text(50, room_height/2-30, "Your");
        draw_text(50, room_height/2+30, "turn");
        draw_set_font(font_culdesac);
        draw_set_colour(c_white);
    }
    else
    {
        draw_text(50, room_height/2-30, "Oponent");
        draw_text(50, room_height/2+30, "turn");
        draw_set_font(font_culdesac);
        draw_set_colour(c_white);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
